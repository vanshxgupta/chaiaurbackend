Remeber in connecting the database -
    i)use try catch becuase errors aa skti hai
    ii)use async await because database response can take time


Steps for Setting Up a Professional Backend Project:

1. **Initialize Git Repository:**  
   - Run `git init` to initialize a new Git repository for version control.

2. **Create Directory Structure:**  
   - Create a `public` folder, a `temp` subfolder inside it, and add a `.gitkeep` file to track the empty folder.  
     Command: `mkdir -p public/temp && touch public/temp/.gitkeep`.

3. **Setup `.gitignore`:**  
   - Use `.gitignore` to exclude unnecessary or sensitive files from the repository.  
   - Generate its content from [Gitignore Generator](https://www.toptal.com/developers/gitignore).

4. **Setup Environment Variables:**  
   - Create `.env` for sensitive configurations and `.env.sample` to list environment variables without exposing values.  
     Command: `touch .env .env.sample`.

5. **Create Source Directory:**  
   - Organize project files by creating `src` and subdirectories: `controllers`, `db`, `middlewares`, `models`, `routes`, and `utils`.  
     Command: `mkdir -p src/{controllers,db,middlewares,models,routes,utils}`.

6. **Install Dependencies:**  
   - Install development tools like `nodemon` for auto-reloading and `prettier` for code formatting.  
     Command: `npm install -D nodemon prettier`.

7. **Update `package.json`:**  
   - Add `"dev": "nodemon src/index.js"` in the `scripts` section to enable a development server.  
   - Include `"type": "module"` to use ES6 modules syntax.

8. **Setup Prettier:**  
   - Create `.prettierignore` to skip formatting certain files or directories:  
     ```plaintext
     node_modules/
     public/temp/
     ```
   - Add `.prettierrc` to define Prettier formatting rules:  
     ```json
     {
       "semi": true,
       "singleQuote": true,
       "tabWidth": 2
     }
     ```

9. **Push Code to Remote Repository:**  
   - Set the default branch as `main` and link your local repository to a remote one for collaboration.  
     Command:  
     ```bash
     git branch -M main
     git remote add origin <repository_url>
     git push -u origin main
     ```

10. **Setup Middleware and Validate Structure:**  
    - Write middleware in the `middlewares` folder for tasks like authentication or logging.  
    - Ensure all files and configurations match the directory structure and project setup.



Steps to connect the database :
i)go to the mongodb atlas and form a new project then setup the cluster , the services and ....write it chatgpt 
    Created a Database and connect I.P Address to access database from anywhere.
ii)then in .env write the mongodb uri from the mongodb atlas 
iii)import Dependencies
    install dotenv
    install mongoose
    install express

iv)connecting the database , we have to method, that are , directly connecting the db in the index.js in src , or method 2 that is writing the code to connect the db
in the differenct file and then combining to index file just to connect it
v)we can do this to get the dotenv "require('dotenv').config({path: './env'})"
but if we do it by "import dotenv from "dotenv" " then ,in package.json we have write this 
"scripts": {
    "dev": "nodemon -r dotenv/config --experimental-json-modules src/index.js"
}

vi)notes:
    a)use try catch becuase errors aa skti hai
    b)use async await because database response can take time
    c)when we do some changes in the env file , then we have to restart the server by npm run dev 






