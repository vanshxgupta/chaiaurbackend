

1)Steps for Setting Up a Professional Backend Project:

      i)Initialize Git Repository:
         - Run `git init` to initialize a new Git repository for version control.

      ii)Create Directory Structure:
         - Create a `public` folder, a `temp` subfolder inside it, and add a `.gitkeep` file to track the empty folder.  
         Command: `mkdir -p public/temp && touch public/temp/.gitkeep`.

      iii). Setup `.gitignore`:  
         - Use `.gitignore` to exclude unnecessary or sensitive files from the repository.  
         - Generate its content from [Gitignore Generator](https://www.toptal.com/developers/gitignore).

      iv). Setup Environment Variables:  
         - Create `.env` for sensitive configurations and `.env.sample` to list environment variables without exposing values.  
         Command: `touch .env .env.sample`.

      v). Create Source Directory:  
         - Organize project files by creating `src` and subdirectories: `controllers`, `db`, `middlewares`, `models`, `routes`, and `utils`.  
         Command: `mkdir -p src/{controllers,db,middlewares,models,routes,utils}`.

      vi). Install Dependencies:  
         - Install development tools like `nodemon` for auto-reloading and `prettier` for code formatting.  
         Command: `npm install -D nodemon prettier`.

      vii). Update `package.json`:  
         - Add `"dev": "nodemon src/index.js"` in the `scripts` section to enable a development server.  
         - Include `"type": "module"` to use ES6 modules syntax.

      viii). Setup Prettier:  
         - Create `.prettierignore` to skip formatting certain files or directories:  
         node_modules/
         public/temp/

         - Add `.prettierrc` to define Prettier formatting rules:  

         {
            "semi": true,
            "singleQuote": true,
            "tabWidth": 2
         }
=

      ix). Push Code to Remote Repository:  
         - Set the default branch as `main` and link your local repository to a remote one for collaboration.  
         Command:  
         ```bash
         git branch -M main
         git remote add origin <repository_url>
         git push -u origin main

      x). Setup Middleware and Validate Structure:  
         - Write middleware in the `middlewares` folder for tasks like authentication or logging.  
         - Ensure all files and configurations match the directory structure and project setup.


2)Steps to connect the database :
      i)go to the mongodb atlas and form a new project then setup the cluster , the services and ....write it chatgpt 
         Created a Database and connect I.P Address to access database from anywhere.
      ii)then in .env write the mongodb uri from the mongodb atlas 
      iii)import Dependencies
         install dotenv
         install mongoose
         install express

      iv)connecting the database , we have to method, that are , directly connecting the db in the index.js in src , or method 2 that is writing the code to connect the db
      in the differenct file and then combining to index file just to connect it
      v)we can do this to get the dotenv "require('dotenv').config({path: './env'})"
      but if we do it by "import dotenv from "dotenv" " then ,in package.json we have write this 
      "scripts": {
         "dev": "nodemon -r dotenv/config --experimental-json-modules src/index.js"
      }

      vi)notes:
         a)use try catch becuase errors aa skti hai
         b)use async await because database response can take time
         c)when we do some changes in the env file , then we have to restart the server by npm run dev 


3)Steps to make the utils folder and what are that about-
   i) A utils folder in the backend is used to store utility functions, classes, or reusable modules that help in simplifying and organizing the codebase.
         /utils
         ├── asyncHandler.js        # Handles async route errors
         ├── ApiResponse.js         # Custom response format
         ├── ApiError.js            # Centralized error handling

      ii)Async Handler
      Purpose: Simplifies handling of asynchronous errors in Express routes.
      How it Works: Wraps an async function and automatically passes errors to the next() middleware.

      ii)Api error
      Purpose: Centralizes error handling by creating custom error objects with standardized properties.
      Key Features:
      Includes statusCode, message, errors, and stack.
      Extends the native Error class for flexibility.

      iii)Api response
      Purpose: Standardizes API responses with consistent structure.
      Key Features:
      Includes statusCode, data, message, and success.
      Automatically sets success based on statusCode.
      Benefit: Ensures all API responses have a predictable format, improving readability and debugging.


4)creating the models for user and video with moongose and adding the bcrpyt ,jwt and aggreagation pipeline to them
      
      i)user.model.js -creating the user model containing the information and linking of the user 
      ii)creating the video model...
      (note-mongoDB saves model names in lowercase and appends character 's' makes it plural
)     

      ii)install dependencies -
         npm install bcrpyt
         npm install jwt
        npm install mongoose-aggregate-paginate-v2
      
      iii)mongoose-aggregate-paginate-v2 is used to paginate aggregation queries in MongoDB by adding aggregatePaginate method to a Mongoose model for efficient data retrieval in chunks.

      iv)bcrypt is used to hash the password(use async function , becuas eit can take time to hash)

      v)JWT (JSON Web Token) is used for securely transmitting user information. It contains a payload (user data) and a signature to ensure its integrity.
            Authentication: After login, the server generates a JWT and sends it to the client.
            Authorization: The client sends the JWT with each request to access protected routes.
            ,jwt.sign() generates a JSON Web Token with a payload, a secret key, and an optional expiration time.

            (use await because it can take time )

      vi)Access Token: Short-lived token used for authenticating API requests.
         Refresh Token: Long-lived token used to obtain a new access token after it expires.
         Expiry Token: The time period after which an access or refresh token becomes invalid.

      vii) we can make our methods in moongose using 
         <schemaname>.methods.<methodname>.....
         

5)For uploading files using multer-
      i)npm install cloudinary
         npm install multer
      ii)setup the cloudinary in there website 
      iii).env mai cloudinary cloudname, apikey , apisecret daalo cloudinary se laake 
      iv)cloudinary.js banao in utils folder , ab uske andr cloudinary config karo aur file uploading ka code likho 
       (vo function bhi async hoga becuase uploading a file takes time )
      v)multer middlware in middlewares , where we takes the stoarage lie diskstoarage , destination where  the file to be uploaded and the file name and callback


6)Guide for the controller and router and downloading postman 
   i)in user.controller.js make the registeruser banao jisme esi hi koi chota sa message send karo
   ii)in the user.routes.js , write the register route on which the register user function will Works
   iii)in the app.js ,app.use("/api/v1/users",userRouter), /api/v1/users name is given as to match the industry standard pratices 

   notes-when u have to use different name in the import statement of any other name of the function written in different file , then we do not wrrite default in that function
   like we have done in the user.controller.js , register user is export {registerUser} , and we have used that in app.js by importing the it as "userRouter" from ....file 
   ,if we use export deault , then we canot use the different name
   
7)Registering a user (in user.controller.js)-
   1.   first the user send the data
   2.   then we have to take the data from body
   2.1,  check if all required fields are available or not 
   3.   then in our regsiteration model we have to find the user if present in it then we return  without registering the user
   4.   if user not  present we create the user in the database
   5.   then we sent the message that user created successfully


    //Steps-
    //i)get user details from frontend
    //ii)validation:not empty
    //iii)check if user already exists:username,email
    //iv)check for images,check for avatar
    //v)upload them to clodinary,avatar
    //vi)create user object-create entry in db
    //vii)remove password and refresh token field from response
    //viii)check for user creation
    //ix)return response


8)Postman for the Backend
   i)Bug Handling: Backend development me bugs aana normal hai, dhyan se debug karo.

   ii)Postman Kya Hai: APIs test karne ke liye Postman ka use hota hai, jahan se requests bhej kar server responses check karte ho.

   iii)File Upload:

      Postman ke Body section me form-data select karo.
      Key me file ya defined name likho.
      Type File set karke file choose karo.
      Debugging: Undefined errors, data format aur property issues ko check karo.
      Auto Cleanup: Temporary storage ka use karo files delete karne ke liye.(cloudinary se file upload hone ke baad unlink krna hai tooh fs.unlinkSync(localFilePath)
   
   iv)Postman Setup Steps
      Download karo aur install karo.
      New request me GET/POST methods choose karo, URL daalo.
      Headers aur Body set karo agar zarurat ho.
      Collection banao jese youtubechai banaya hai aur environment bhi banao jese youtubechai banaya hai

   v)Bug Fixes for Register Controller:
      Proper request handling ke liye multer aur cleanup logic add karo


9)Login a User in user.controller.js and route for login in user.routes.js

   Steps:
    i)req body se data lao
    ii)username or email  se login karenge
    iii)find the user(if the given username or email ,exist or not , if exist then procced to next step otherwise ,throw error that user do not exist or we can do that redirect it the register page to register first)
    iv)password check(check for the password validation by the custom method that we have written in the user.model.js i.e isPasswordcorrect)
    v)access , refersh token -->to generate this we have written a code in user.controller.js and previously in the user.model also
    vi)send cookies :
      ->sets two HTTP-only, secure cookies for accessToken and refreshToken to ensure they are sent only over HTTPS and inaccessible to JavaScript. It then responds with a 200 status, including the user data (excluding password and refresh token) and the generated tokens. Finally, a success message is sent in the response body indicating the user logged in successfully. 
    
10)Logout a User in user.controller.js and route for logout in user.routes.js and middleware for getting the user that user is authenicated or not in the auth.middleware.js
   
   i)In the auth.middleware.js-
      i)Use of verifyJWT:
      The verifyJWT middleware checks if the request has a valid JWT token, ensuring only authenticated users can access protected routes.

      ii)Extracts the token from cookies or Authorization header.
      iii)Verifies the token using the secret key.
      iv)Fetches the user from the database and attaches it to req.user.

    

   ii)and then in the user.routes.js-
      i)the route for the logout 
      ii) Note:  post mai do argument pe route jaata kese hai ye dekhte hai , /logout karenge tooh sabse pehle tooh vo first  argument pe hi jaayega , tooh vaha chala gaya , 
    ab verifyJWT middleware ke andr humne likh rkha hai end hi end mai kaam hone ke baad next() , tooh iski vajhe se vo next argument pe jaayega , agar next nahi likhte tooh nahi jaata 

   iii)then in user.controller.js-
      i)logout method -
         //user ko dhondo 
         //aur uski cookies ko delte karo
      ii) //findbyidandupdate takes 3 things, filter, update, and options
      iii)return the resonse and delete the cookie by clearCokie




      


      